#! /usr/bin/env ruby

require 'erb'
require 'fileutils'
require 'pathname'
require 'logger'

logger = Logger.new(STDOUT)

root_dir = Pathname.new(__dir__).join('..')
images_dir = root_dir.join('images')

dockerfile_erb = ERB.new(images_dir.join('Dockerfile.erb').read, trim_mode: '-')
entrypoint_erb = ERB.new(images_dir.join('entrypoint.sh.erb').read, trim_mode: '-')

FileUtils.rm_rf(images_dir.glob('*').select(&:directory?))

node_images = [
  {name: 'node', version: '24', base_image: 'node:24.4.1-bookworm'},
  {name: 'node', version: '22', base_image: 'node:22.17.1-bookworm'},
]

ruby_images = [
  {name: 'ruby', version: '3.4', base_image: 'ruby:3.4.4-bookworm'},
]

[
  *node_images,
  *ruby_images,
  *ruby_images.product(node_images).map {|ruby, node|
    ruby.merge(tag: ruby[:version] + '-node-' + node[:version], node_version: node[:version])
  },
  *node_images.map {|node|
    node.merge(name: 'cypress', tag: 'node-' + node[:version])
  },
  {name: 'rust', base_image: 'rust:1.88.0-bullseye'},
  {name: 'golang', base_image: 'golang:1.24.5-bullseye'},
  {name: 'clojure', base_image: 'clojure:openjdk-11-lein-2.9.6-bullseye'},
  {name: 'docker', base_image: 'debian:11.11'},
  {name: 'qmk', base_image: 'debian:11.11'},
  {name: 'idf-rust', base_image: 'espressif/idf-rust:esp32_v4.4_1.61.0.0'}
].each do |x|
  logger.info("Processing #{x.inspect}")

  name = x[:name]
  tag = x[:tag] || x[:version]
  base_image = x[:base_image]
  node_version = x[:node_version]

  dir = tag ? images_dir.join(name, tag) : images_dir.join(name)
  FileUtils.mkdir_p(dir)
  dir.join('Dockerfile').write(dockerfile_erb.result(binding))
  dir.join('entrypoint.sh').write(entrypoint_erb.result(binding))
end

images = images_dir.glob('*/*/Dockerfile').map {|f| "#{f.parent.parent.basename}:#{f.parent.basename}" }
images += images_dir.glob('*/Dockerfile').map {|f| f.parent.basename.to_s }

readme_erb = ERB.new(<<~ERB, trim_mode: '-')
# Devimages

A collection of docker images for development env.

## Images

<%- images.each do |img| -%>
- ghcr.io/mtsmfm/devimages/<%= img %>
<%- end -%>

You can find all images on GitHub packages page:

https://github.com/mtsmfm?tab=packages&tab=packages&q=devimages
ERB

root_dir.join('README.md').write(readme_erb.result(binding))

build_and_push_erb = ERB.new(<<~ERB, trim_mode: '-')
on:
  pull_request:
    paths:
      - <%= data[:dockerfile].parent.relative_path_from(root_dir) %>/**
      - <%= file.relative_path_from(root_dir) %>
    branches:
      - main
  push:
    paths:
      - <%= data[:dockerfile].parent.relative_path_from(root_dir) %>/**
      - <%= file.relative_path_from(root_dir) %>
    branches:
      - main

jobs:
  build:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/${{ github.repository }}/<%= data[:image] %>
          tags: |
            type=raw,value=<%= data[:latest] -%>,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=branch,prefix=<%= data[:prefix] %>
            type=ref,event=pr,prefix=<%= data[:prefix] %>pr-
            type=sha,prefix=<%= data[:prefix] %>sha-
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v2
        with:
          context: <%= data[:dockerfile].parent.relative_path_from(root_dir) %>
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
ERB

(root_dir.glob('images/*/Dockerfile').map {|f|
  {dockerfile: f, image: f.parent.basename, prefix: '', latest: 'latest'}
} + root_dir.glob('images/*/*/Dockerfile').map {|f|
  {dockerfile: f, image: f.parent.parent.basename, prefix: "#{f.parent.basename}--", latest: f.parent.basename}
}).each do |data|
  name = data[:image].to_s
  name += "--#{data[:latest]}" unless data[:latest] == 'latest'
  file = root_dir.join(".github/workflows/build-and-push--#{name}.yaml")
  logger.info("Writing #{file}")

  FileUtils.mkdir_p(file.dirname)
  file.write(build_and_push_erb.result(binding))
end
